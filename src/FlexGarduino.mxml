<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   xmlns:arduino="net.eriksjodin.arduino.*"
					   xmlns:charts="com.toddrothe.charts.*"
					   creationComplete="onCreationComplete()" 
					   width="800" height="600" >
	<fx:Declarations>
		<arduino:Arduino id="arduino" />
	</fx:Declarations>
		
	<fx:Script>
		<![CDATA[
			import com.toddrothe.model.vo.ReadingVO;
			
			import net.eriksjodin.arduino.Arduino;
			import net.eriksjodin.arduino.events.ArduinoEvent;
			
			import com.elad.framework.sqlite.SQLiteManager;
			import com.elad.framework.sqlite.events.StatementSuccessEvent;

			import flash.events.Event;
			import flash.events.MouseEvent;
			import mx.collections.ArrayCollection;
			
			// TR: db vars
			private var database:SQLiteManager = SQLiteManager.getInstance();
			private var dbFile:File;
			
			// TR: sensors
			private var _moistureSensor:Number = 0;
			private var _lightSensor:Number = 1;
			private var _tempSensor:Number = 2;
			
			// TR: 4.5.10 relays - not implemented yet
			private var _waterPumpRelay:Number = 12;
			private var _ledRelaySignal:Number = 13;
			
			private var timer:Timer = new Timer(3000);
			private var lastReadingId:Number; // TR: 4.5.10 refactor. not doing anything yet
			
			[Bindable] 
			public var readingsResultData:ArrayCollection = new ArrayCollection();
			
			private var getReadingsFromDBInited:Boolean = false; // TR: flag to indicate if initial db data has been pulled for display. we only want to pull once.
			
			
			private function onCreationComplete():void
			{
				arduino.addEventListener(ArduinoEvent.FIRMWARE_VERSION, onArduinoStartup); // TR: listen for arduino board reset.
				status_txt.text="Waiting for Firmata firmware version (reset your board)...";
				
				dbFile = new File("app-storage:/FlexGarduinoData.db"); // TR: prep db connection
				
				database.start("FlexGarduinoData.db", "Readings", "CREATE TABLE IF NOT EXISTS readings (id INTEGER PRIMARY KEY, date Number, moisture NUMBER, temprature NUMBER, light NUMBER)");
				
				database.addEventListener(SQLiteManager.COMMAND_EXEC_SUCCESSFULLY, storeReadingsSuccessHandler);
				database.addEventListener(SQLiteManager.COMMAND_EXEC_FAILED, errorDBHandler );
				
				database.executeSelectAllCommand();	// TR: read all entries from the db when app starts		
			}
			
			public function onArduinoStartup( e:ArduinoEvent ):void 
			{			
				// TR: init input pins on board
				arduino.setAnalogPinReporting(_moistureSensor, Arduino.ON); 
				arduino.setAnalogPinReporting(_lightSensor, Arduino.ON); 
				arduino.setAnalogPinReporting(_tempSensor, Arduino.ON);
				
				//TR: 4.5.10 init output pins on board - not implemented yet. need to get relay working
				arduino.setPinMode(_waterPumpRelay, Arduino.OUTPUT);
				arduino.writeDigitalPin(_waterPumpRelay, Arduino.HIGH);
				arduino.setPinMode(_ledRelaySignal, Arduino.OUTPUT);
				
				timer.addEventListener(TimerEvent.TIMER, captureData);
				timer.start();
			}
			
			private function storeReadingsSuccessHandler( event:StatementSuccessEvent ):void
			{					
				if( getReadingsFromDBInited )
				{
					addReadingToLocalResultSet( null, event.sqlText );	// TR: store readings in local result set once they have been pushed to db
				}		
				else
				{
					var result:Object = event.results.data	
						
					for each( var item:Object in result) // TR: executes when app starts up and db returns all values
					{
						addReadingToLocalResultSet( item, null );
					}
					readingsResultData.refresh();
					getReadingsFromDBInited = true; // TR: flag to true
				}
			}
			private function addReadingToLocalResultSet(item:Object = null, sqlText:String = null ):void
			{
				if( item == null ) // TR: if item is null then construct item from values written to db, avalable through sqlText
				{
					item = new Object();
					var tempString:String = sqlText;
					var vals:Array = tempString.substring( tempString.indexOf('VALUES (') + 8, tempString.length - 2).split(', ');
					item['id'] = lastReadingId++;
					item['date'] = Number(vals[0]);
					item['moisture'] = vals[1];
					item['temprature'] = vals[2];
					item['light'] = vals[3];
				}
				
				var reading:ReadingVO = new ReadingVO();
				var readingDate:Date = new Date( item.date )
				reading.createReadingObj( item.id, readingDate, item.moisture, item.temprature, item.light );
				readingsResultData.addItem( reading );
				lastReadingId = item.id as Number;
				
				if( sqlText != null ) // TR: if item values were constructed from sqlText then refresh the arrayCollection here
				{
					readingsResultData.refresh();
				}
			}			
			
			public var readingsTakenCount:Number = 0;	// TR: count to show user that readings are being taken 		
			private function captureData(event:TimerEvent):void
			{				
				readingsTakenCount++
				var now:Date = new Date(); 
				var currentTime:Number = Math.round(now.valueOf()); //	TR: store date/time of readings
				var moistureReading:int = arduino.getAnalogData(_moistureSensor);
				var tempratureReading:int = arduino.getAnalogData(_tempSensor);
				var lightReading:int = arduino.getAnalogData(_lightSensor);
				status_txt.text="light reading : "+lightReading+"  -  "+readingsTakenCount; // TR: display to show user that readings are being taken
				
				storeReadings( null, currentTime, moistureReading, tempratureReading , lightReading );	
			}	
			
			private function storeReadings( eventObj:SQLEvent = null, date:Number=undefined, moisture:Number=undefined, temprature:Number=undefined, light:Number=undefined ):void
			{
				var sql:String =  "INSERT INTO readings (date, moisture, temprature, light) VALUES ("+date+", "+moisture+", "+temprature+", "+light+")"; 
				database.executeCustomCommand(sql);				
			}
			
			private function errorDBHandler(e:Event):void
			{
				trace("[DATABASE CONNECTION ERROR]  "+e)
			}
			
			
		]]>
	</fx:Script>	
	
	<mx:Text id="status_txt"/>
	
	<charts:ReadingsChart id="readingsChart" x="10" y="10" width="90%" height="90%" dataProvider="{readingsResultData}"/>

</s:WindowedApplication>
